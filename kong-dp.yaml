#---------------------------------------------------------------------------------------------------------
# !!! Uncomment this section in case of Data Plane is not deployed in same ns or cluster of Control Plane
#
#---------------------------------------------------------------------------------------------
# mTLS - Hybrid Mode - Shared Mode: The certificate/key pair is shared by both CP and DP nodes
#---------------------------------------------------------------------------------------------
#apiVersion: v1
#kind: Secret
#metadata:
#  name: secret-hybrid-cluster-tls
#type: kubernetes.io/tls
#data:
#  # -------------------------
#  # How to have this content?
#  # -------------------------
#  # First generate the cluster.crt and cluster.key by using 'kong hybrid gen_cert'
#  # Dump the result in this yaml file:
#  #   cat cluster.crt | base64
#  #   cat cluster.key | base64
#  tls.crt: |
#    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJXRENCM3dJQkFEQUtCZ2dxaGtqT1BRUURBakFhTVJnd0ZnWURWUVFEREE5cmIyNW5YMk5zZFhOMFpYSnAKYm1jd0hoY05Nakl3T1RJd01UVXdNREExV2hjTk1qVXdPVEU1TVRVd01EQTFXakFhTVJnd0ZnWURWUVFEREE5cgpiMjVuWDJOc2RYTjBaWEpwYm1jd2RqQVFCZ2NxaGtqT1BRSUJCZ1VyZ1FRQUlnTmlBQVJTdFJXVmgvbHNnRFdsCmRUMWdQdXZUMVJLRURQRFJJcW1rS2VEc1RaSDlyTTNQYWpITERObUp1czBtY2FtWXY4K3NGQm1hOEd1bHBYa2EKSVl0Slo1azZyek82L3pkZGJoeVhtTU5qVjhkeGRwZ0drOUxIK1lFQnJYSis4T3p6S25vd0NnWUlLb1pJemowRQpBd0lEYUFBd1pRSXhBTHNvU2FWTnBHd3lEZjFER0I0N1A0WVJiVUhOZFVSYzFTQVNQVCs5Y3pzRUVyZm9rR1p1Cm8vSEJXYkQ5SFpteWhRSXdYOGNqSzRWTDc0WTRYeVdFM25VQ0lsQTQ3eXNKSUJqTld4aFF5TktGR25ubXN5M0sKSFVjMTlnOFVXeTBROG01KwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
#  tls.key: |
#    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JRzJBZ0VBTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQklHZU1JR2JBZ0VCQkRDY0tnbEtnekZ1R3Bqa0pQbk4KWEhyWU5zOFNlSHQrb3RySmVoUnEyNHV0cTVDZjN2L3BQOHRZK2ttZU1GU2krL1NoWkFOaUFBUlN0UldWaC9scwpnRFdsZFQxZ1B1dlQxUktFRFBEUklxbWtLZURzVFpIOXJNM1BhakhMRE5tSnVzMG1jYW1Zdjgrc0ZCbWE4R3VsCnBYa2FJWXRKWjVrNnJ6TzYvemRkYmh5WG1NTmpWOGR4ZHBnR2s5TEgrWUVCclhKKzhPenpLbm89Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
#---
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: kong-serviceaccount
#  namespace: kong
#---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  name: kong-proxy
  namespace: kong
spec:
  ports:
  - name: proxy
    port: 80
    protocol: TCP
    targetPort: 8000
  - name: proxy-ssl
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: kong-dp
  type: LoadBalancer
---
#------------------------------------------------------------------------------
# POD: Kong Data Plane
#------------------------------------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  name: kong-proxy-status
  namespace: kong
spec:
  ports:
  - name: proxy-status
    port: 80
    protocol: TCP
    targetPort: 8100
  selector:
    app: kong-dp
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kong-dp
  name: kong-dp
  namespace: kong
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kong-dp
  template:
    metadata:
      annotations:
        kuma.io/gateway: enabled
        kuma.io/service-account-token-volume: kong-serviceaccount-token
        traffic.sidecar.istio.io/includeInboundPorts: ""
      labels:
        app: kong-dp
    spec:
      automountServiceAccountToken: false
      containers:
      - env:
        - name: KONG_LICENSE_DATA
          valueFrom:
            secretKeyRef:
              key: license
              name: kong-enterprise-license
        - name: KONG_DATABASE
          value: "off"
        - name: KONG_ROLE
          value: data_plane
        - name: KONG_CLUSTER_CERT
          value: /usr/local/kong/cluster_key/tls.crt
        - name: KONG_CLUSTER_CERT_KEY
          value: /usr/local/kong/cluster_key/tls.key
        - name: KONG_CLUSTER_CONTROL_PLANE
          value: kong-cluster-hybrid:8005
        - name: KONG_CLUSTER_TELEMETRY_ENDPOINT
          value: kong-cluster-hybrid:8006
        - name: KONG_PROXY_LISTEN
          value: 0.0.0.0:8000 reuseport backlog=16384, 0.0.0.0:8443 http2 ssl reuseport backlog=16384
        - name: KONG_STATUS_LISTEN
          value: 0.0.0.0:8100
        - name: KONG_PROXY_URL
          value: http://kong-proxy.client.net
        - name: KONG_ADMIN_API_URI
          value: http://kong-admin.client.net
        - name: KONG_ADMIN_GUI_URL
          value: http://kong-manager.client.net
        - name: KONG_PORTAL_GUI_HOST
          value: kong-devportal.client.net
        - name: KONG_PORTAL_API_URL
          value: http://kong-portal-api.client.net
        - name: KONG_PORTAL_GUI_PROTOCOL 
          value: http
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_PROXY_ERROR_LOG
          value: /dev/stderr
        - name: KONG_ROUTER_FLAVOR
          value: traditional
        image: kong/kong-gateway:3.0.0.0-alpine
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2048Mi"
            cpu: "1"
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - kong quit
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 8100
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /status
            port: 8100
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: kong-dp
        ports:
        - containerPort: 8000
          name: proxy
          protocol: TCP
        - containerPort: 8443
          name: proxy-ssl
          protocol: TCP
        - containerPort: 8100
          name: metrics
          protocol: TCP
        volumeMounts:
        - name: cluster-key
          mountPath: "/usr/local/kong/cluster_key"
          readOnly: true
      volumes:
        - name: cluster-key
          secret:
            secretName: secret-hybrid-cluster-tls
            optional: false # default setting; "secret-tls" must exist

